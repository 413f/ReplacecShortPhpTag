{"version":3,"sources":["functions/processZip.tsx","components/RFixPhpTags/RFileInput/RFileInput.tsx","components/RFixPhpTags/RProcessLog/RProcessLog.tsx","components/RFixPhpTags/RFixPhpTags.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["processZip","zipFile","log","Promise","resolve","rejects","a","size","isPHP","name","match","JSZip","loadAsync","then","zip","newZip","files","key","zipEntry","dir","folder","async","text","newText","replace","file","generateAsync","type","blob","saveAs","toString","RFileInput","props","zipType","onStartProccess","console","useState","File","setFile","isSelectedFile","fileSelected","inputRef","useRef","inputNode","onChange","e","selectorFiles","inputFile","handleChange","target","accept","className","ref","unsetNode","onClick","current","value","processFileButton","click","processLog","this","RProcessLog","params","messages","map","item","index","RFixPhpTags","setMessages","isProcessing","setIsProcessing","message","setMessage","r","useEffect","oldMessages","unshift","Date","now","addMessage","processFile","App","window","matchMedia","matches","id","Boolean","location","hostname","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.9bfeb26f.chunk.js","sourcesContent":["import JSZip  from \"jszip\";\r\nimport { saveAs } from 'file-saver';\r\n\r\nfunction process (zipFile: File, log: Function): Promise<Boolean> {\r\n        return new Promise(async (resolve,rejects) => {\r\n                await log('Process started');\r\n                if(zipFile.size === 0){\r\n                        rejects(false);\r\n                        return;\r\n                }\r\n                try {\r\n                        function isPHP(name:String): Boolean {\r\n                                return name.match(/\\.php$/) ? true : false;\r\n                        }\r\n                        await JSZip.loadAsync(zipFile).then(async (zip) => {\r\n                                const newZip = new JSZip();\r\n                                \r\n                                log('File \\''+zipFile.name+'\\' is opened');    \r\n                                for(const key in zip.files){\r\n                                        const zipEntry = zip.files[key];\r\n                                        const name = zipEntry.name;\r\n                                        if(zipEntry.dir){\r\n                                                newZip.folder(name);\r\n                                        }\r\n                                        const text = await zipEntry.async(\"string\");\r\n                                        if(isPHP(name)){\r\n                                                const newText = text.replace(/<\\?(?!php|=)/g,'<?php ');\r\n                                                newZip.file(name,newText || text);\r\n                                                log('File processed: '+name);\r\n                                        }else{\r\n                                                log('File skiped: '+name);\r\n                                                newZip.file(name,text);\r\n                                        }\r\n                                }\r\n                                newZip.generateAsync({type:\"blob\"})\r\n                                .then(function (blob) {\r\n                                    saveAs(blob, \"out.zip\");\r\n                                });\r\n                                log('Process is end');\r\n                        });\r\n                }catch(error){\r\n                        await log(error.toString());\r\n                        rejects(false);\r\n                        return;\r\n                }\r\n                resolve(true);\r\n                return;\r\n        });\r\n}\r\n\r\nexport let processZip = process;","import {useState,useRef} from 'react'\r\nimport './RFileInput.css'\r\n\r\nfunction RFileInput(props: {onStartProccess: Function}){\r\n\r\n    const zipType = 'application/x-zip-compressed';\r\n    const onStartProccess = props.onStartProccess || console.log;\r\n    const [file, setFile] = useState(new File([],''));\r\n\r\n    const handleChange = (selectorFiles: any) =>    \r\n    {\r\n        const inputFile = selectorFiles[0];\r\n        if(!(inputFile instanceof File)){\r\n            console.log('file not selected');\r\n            setFile(new File([],''));\r\n            return;\r\n        }else if(inputFile.type !== zipType){\r\n            console.log('Need select zip file');\r\n            setFile(new File([],''));\r\n            return;\r\n        }\r\n        \r\n        setFile(inputFile);\r\n    }\r\n\r\n    const isSelectedFile = file.size > 0;\r\n    let fileSelected = '';\r\n    if(isSelectedFile){\r\n        fileSelected = 'Selected file: '+file.name;\r\n    }else{\r\n        fileSelected = 'File not selected';\r\n    }\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const onClickElement = () => {\r\n        if(inputRef && inputRef.current) {\r\n            inputRef.current.click()\r\n        }\r\n    }\r\n    const unsetSelectedFile = () =>{\r\n        if(inputRef && inputRef.current) {\r\n            inputRef.current.value = '';\r\n        }\r\n        setFile(new File([],''));\r\n    }\r\n\r\n    const inputNode =   <input \r\n        type='file' \r\n        onChange={ (e) => handleChange(e.target.files) }\r\n        accept={zipType}\r\n        className='input-select-file'\r\n        ref={inputRef}\r\n    ></input>\r\n    \r\n    const unsetNode = <span className='unset-select-file' onClick={unsetSelectedFile} >Unset</span>;\r\n    const processFileButton = <span className='button-process-file' onClick={() => {onStartProccess(file)}}>Process</span>\r\n    return <div className='select-file'>\r\n        <span onClick={onClickElement} className='button-select-file'>Select File</span>\r\n        {inputNode}\r\n        <div className='state-select-file'>\r\n            <span className=\"title-select-file\">{fileSelected}</span>\r\n            {isSelectedFile ? unsetNode : ''}\r\n        </div>\r\n        {isSelectedFile ?\r\n            <div className='process-file-block'>\r\n                {processFileButton}\r\n            </div>\r\n        :''}\r\n    </div>\r\n}\r\n\r\nexport default RFileInput","import './RProcessLog.css'\r\n\r\nexport class processLog {\r\n    public key: String | Number;\r\n    public text: String;\r\n    constructor(key?: String | Number, text?: String){\r\n        this.key = key || 0;\r\n        this.text = text || '';\r\n    }\r\n    \r\n}\r\n\r\nfunction RProcessLog <processLog> (params:{messages: processLog[]}) {\r\n    return <div className='log-messages'>\r\n            {params.messages.map((item,index) => {\r\n                if(item instanceof processLog ){\r\n                    return <div className='log-message' key={(item.key || '').toString() || index }>{item.text || ''}</div>\r\n                }\r\n                return '';\r\n            })}\r\n    </div>\r\n}\r\nexport default RProcessLog","//import React from 'react'\r\nimport {useEffect,useState} from 'react';\r\nimport './RFixPhpTags.css'\r\n\r\nimport {processZip} from '../../functions/processZip'\r\nimport RFileInput from './RFileInput/RFileInput'\r\nimport RProcessLog, {processLog} from './RProcessLog/RProcessLog'\r\n\r\n\r\nfunction RFixPhpTags() {\r\n\r\n    const [messages,setMessages] = useState<processLog[]>([]);\r\n    const [isProcessing,setIsProcessing] = useState<Boolean>(false);\r\n    const [message,setMessage] =  useState<String>('');\r\n\r\n    function addMessage(log: String) {\r\n        let oldMessages = [...messages];\r\n        oldMessages.unshift(new processLog(Date.now(),log));\r\n        setMessages(oldMessages);\r\n    }\r\n\r\n    useEffect(() => {\r\n        addMessage(message);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[message]);\r\n\r\n    async function processFile(file: File) {\r\n        if(isProcessing){\r\n            //setMessage('Process is runing');\r\n            return;\r\n        }\r\n        setMessages([]);\r\n        setIsProcessing(true);\r\n        await processZip(file,setMessage).then((r: any) => {\r\n            setIsProcessing(false);\r\n        },console.log)\r\n        return;\r\n    }\r\n\r\n    return <div className='fix-php-tags'>\r\n        <div className='select-file-block'>\r\n        <RFileInput\r\n            onStartProccess={(file: File) => {processFile(file); }}\r\n        ></RFileInput>\r\n        </div>\r\n        <div className='messages-block'>\r\n            <RProcessLog\r\n                messages={messages}\r\n            ></RProcessLog>\r\n        </div>\r\n    </div>\r\n\r\n}\r\n\r\nexport default RFixPhpTags;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport './styles/color.css'\nimport './styles/general.css'\n\n//import RButton from './components/RButton/RButton'\nimport RFixPhpTags from './components/RFixPhpTags/RFixPhpTags'\n\nfunction App() {\n  const isDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  const themeClass = isDark || true ? 'dark-theme' : 'light-theme';\n  const appClass ='App '+themeClass;\n  return (\n    <div className={appClass} id=\"App\">\n      <header className=\"App-header\">\n        <RFixPhpTags></RFixPhpTags>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n//serviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}